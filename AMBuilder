# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os

# Name of your extesion, this will also be it's file name.
projectName = 'sendvaredit'

class SafetyHook(object):
  def __init__(self):
    self.all_targets = []
    self.libsafetyhook = {}
  def configure(self):
    target_archs = []
    if builder.options.targets:
      target_archs = builder.options.targets.split(',')
    else:
      target_archs = ['x86', 'x86_64']

    for arch in target_archs:
      try:
        cxx = builder.DetectCxx(target_arch = arch)
      except Exception as e:
        if builder.options.targets:
          raise
        print('Skipping target {}: {}'.format(arch, e))
        continue
      self.all_targets.append(cxx)

SH = SafetyHook()
SH.configure()

builder.Build(os.path.join('safetyhook', 'AMBuilder'), { 'SafetyHook': SH })

# smsdk_ext.cpp will be automatically added later
sourceFiles = [
  'extension.cpp',
]

project = builder.LibraryProject(projectName)

if os.path.isfile(os.path.join(builder.currentSourcePath, 'sdk', 'smsdk_ext.cpp')):
  # Use the copy included in the project
  project.sources += [os.path.join('sdk', 'smsdk_ext.cpp')]
else:
  # Use the copy included with SM 1.6 and newer
  project.sources += [os.path.join(Extension.sm_root, 'public', 'smsdk_ext.cpp')]

project.sources += sourceFiles

for sdk_name in Extension.sdks:
  sdk = Extension.sdks[sdk_name]
  if sdk['name'] in ['mock']:
    continue

  for cxx in builder.targets:
    if not cxx.target.arch in sdk['platforms'][cxx.target.platform]:
      continue

    binary = Extension.HL2ExtConfig(project, builder, cxx, projectName + '.ext.' + sdk['extension'], sdk)

    if binary.compiler.vendor == 'msvc':
      binary.compiler.cflags += ['/Oy-'] # don't omit frame-pointer
    else:
      binary.compiler.cflags += ['-fno-omit-frame-pointer'] # don't omit frame-pointer
      binary.compiler.cxxflags += ['-Wno-unknown-pragmas', '-Wno-dangling-else']

    binary.compiler.cxxincludes += [
      os.path.join(builder.sourcePath, 'safetyhook', 'include'),
    ]

    for task in SH.libsafetyhook:
      if task.target.arch == binary.compiler.target.arch:
        binary.compiler.linkflags += [task.binary]

Extension.extensions += builder.Add(project)
